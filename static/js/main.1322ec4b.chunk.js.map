{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onChange","toggleMode","TextForm","useState","text","setText","style","color","label","value","event","target","backgroundColor","rows","onClick","tt","document","querySelector","select","execCommand","showAlert","morseCodeDic","ts","split","map","el","join","at","trim","length","replace","readOnly","App","setMode","setAlert","message","setTimeout","aboutText","body","background","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1322ec4b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        let lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}: </strong>{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","// import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n// import {Link} from 'react-router-dom';\r\n// import AboutUs from './AboutUs'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    \r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\r\n                            </li>\r\n                            </ul>\r\n                                <div className=\"form-check form-switch\">\r\n                                    <input className=\"form-check-input \" onChange={props.toggleMode} type=\"checkbox\" id=\"Switch\"/>\r\n                                </div>\r\n                        </div>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\n","import React , {useState} from 'react';\r\n\r\nexport default function TextForm(props) {\r\n    const  [text,setText] = useState(\"\");\r\n    // const [text2,set] = useState(\"\");\r\n    const handleUpClick = () =>{\r\n        let tt = text.toUpperCase();\r\n        setText(tt);\r\n    }\r\n    \r\n\r\n    const handleCopyText = ()=>{\r\n        let  area = document.querySelector(\"#box\");\r\n        // console.log(area.textContent);\r\n        area.select();\r\n        document.execCommand('copy');\r\n        props.showAlert(\"Text has been copied to the Clipboard!\",\"success\");\r\n        \r\n    }\r\n\r\n    const morseCode =()=>{\r\n        \r\n        const morseCodeDic = {\r\n            \"A\": \".-\",\r\n            \"B\": \"-...\",\r\n            \"C\": \"-.-.\",\r\n            \"D\": \"-..\",\r\n            \"E\": \".\",\r\n            \"F\": \"..-.\",\r\n            \"G\": \"--.\",\r\n            \"H\": \"....\",\r\n            \"I\": \"..\",\r\n            \"J\": \".---\",\r\n            \"K\": \"-.-\",\r\n            \"L\": \".-..\",\r\n            \"M\": \"--\",\r\n            \"N\": \"-.\",\r\n            \"O\": \"---\",\r\n            \"P\": \".--.\",\r\n            \"Q\": \"--.-\",\r\n            \"R\": \".-.\",\r\n            \"S\": \"...\",\r\n            \"T\": \"-\",\r\n            \"U\": \"..-\",\r\n            \"W\": \".--\",\r\n            \"X\": \"-..-\",\r\n            \"Y\": \"-.--\",\r\n            \"Z\": \"--..\"\r\n         }\r\n         \r\n        let tt = text;\r\n         let ts = tt.toUpperCase().split(\"\").map(el=>{\r\n             return morseCodeDic[el] ? morseCodeDic[el] : el;\r\n         }).join(' ');\r\n         let  area = document.querySelector(\"#box\");\r\n         area.value = ts;\r\n\r\n    };\r\n\r\n    const handleLoClick = () =>{\r\n        let tt = text.toLowerCase();\r\n        setText(tt);\r\n    }\r\n    \r\n    const handleOnChange = (event) =>{\r\n        setText(event.target.value);\r\n        \r\n    }\r\n    const clearText = () =>{\r\n        setText('');\r\n    }\r\n\r\n\r\n    return (\r\n        < >\r\n            <div className=\"mb-3 \" style={{color:props.mode === 'light' ? 'black' : 'white'}}>\r\n                    <h1>{props.label}</h1>\r\n                    <div className=\"form-group mb-3\">\r\n                        {/* <label for=\"exampleFormControlTextarea1\">{props.label}</label> */}\r\n                        <textarea className=\"form-control\" value={text} type='code' onChange={handleOnChange} style={{backgroundColor: props.mode === 'light' ? 'white' : '#212529',color:props.mode === 'light' ? 'black' : 'white'}} id=\"exampleFormControlTextarea1\" rows=\"8\"></textarea>\r\n                    </div>\r\n                    <button onClick = {handleUpClick}className= \"btn btn-primary mx-2 my-2\">Upper Case</button>\r\n                    <button onClick = {handleLoClick}className= \"btn btn-primary mx-2 my-2\">Lower Case</button>\r\n                    <button onClick={handleCopyText} className= \"btn btn-primary mx-2 my-2\">Copy Text</button>\r\n                    <button onClick={morseCode} className= \"btn btn-primary mx-2 my-2\">Morse Code</button>\r\n                    <button onClick={clearText} className= \"btn btn-primary mx-2 my-2\">Clear Text</button>\r\n                    \r\n            </div>\r\n            <div className=\"container my-3\" style={{color:props.mode === 'light' ? 'black' : 'white'}}>\r\n                <h1>Text Summary:</h1>\r\n                <p>{text.split(\" \").at(0) === \"\"?\"0\":text.trim().split(\" \").length} words and {text.replace(/ /g,\"\").length} characters</p>\r\n                <p>{0.008 * (text.trim().split(\" \").length-1)} Minute Read</p>\r\n                <h1>Preview</h1>\r\n                <textarea className=\"form-control\" value={text}  id=\"box\" style={{backgroundColor: props.mode === 'light' ? 'white' : '#212529',color:props.mode === 'light' ? 'black' : 'white'}} readOnly  rows=\"8\"></textarea>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n// import logo from './logo.svg';\nimport './App.css';\nimport Alert from './components/Alert';\n// import AboutUs from './components/AboutUs';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message , type) =>{\n      setAlert({\n        msg : message,\n        type : type\n      })\n      setTimeout(() => {\n        setAlert(null);\n      }, 3000);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.background = '#083348'\n      showAlert(\"Dark mode has been enabled!\",\"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.background = '#ffffff'\n      showAlert(\"Light mode has been enabled!\",\"success\");\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"Text Utils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container\">\n        {/* <TextForm label=\"Enter text to analyze:\" showAlert={showAlert} mode={mode} />\n        <AboutUs/> */}\n        {/* <Switch>\n        <Route exact path=\"/\"> */}\n          <TextForm label=\"Enter text to analyze:\" showAlert={showAlert} mode={mode} />\n          {/* </Route> */}\n          {/* <Route path=\"/about\">\n            <AboutUs mode={mode} />\n          </Route>\n        </Switch> */}\n      </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}